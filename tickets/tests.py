from datetime import timedelta

import pytest
from django.utils import timezone

from authentication.services import create_user
from tickets.selectors import (
    get_assigned_qa_tickets,
    get_assigned_tickets,
    get_created_tickets,
)
from tickets.services import create_ticket, assign_qa

today = timezone.now()
next_week = today + timedelta(weeks=1)


@pytest.mark.django_db
def test_user_can_create_a_ticket_and_assign_it_to_another_user():
    john = create_user(email="john@example.com")
    jane = create_user(email="jane@example.com")
    ticket = create_ticket(
        created_by=john,
        assigned_to=jane,
        problem_statement="The client is requesting changes for the existing API",
        eta=next_week,
    )
    assert ticket.assigned_to == jane


@pytest.mark.django_db
def test_can_fetch_all_assigned_tickets_of_a_user():
    john = create_user(email="john@example.com")
    jane = create_user(email="jane@example.com")
    for i in range(3):
        create_ticket(
            created_by=john,
            assigned_to=jane,
            problem_statement="The client is requesting changes for the existing API",
            eta=next_week,
        )
    assert len(get_assigned_tickets(user=jane)) == 3


@pytest.mark.django_db
def test_can_fetch_all_created_tickets_of_a_user():
    john = create_user(email="john@example.com")
    jane = create_user(email="jane@example.com")
    for i in range(3):
        create_ticket(
            created_by=john,
            assigned_to=jane,
            problem_statement="The client is requesting changes for the existing API",
            eta=next_week,
        )
    assert len(get_created_tickets(user=john)) == 3


@pytest.mark.django_db
def test_a_tickets_creation_date_is_autogenerated():
    john = create_user(email="john@example.com")
    jane = create_user(email="jane@example.com")
    ticket = create_ticket(
        created_by=john,
        assigned_to=jane,
        problem_statement="The client is requesting changes for the existing API",
        eta=next_week,
    )
    assert ticket.created_at.day == today.day


@pytest.mark.django_db
def test_a_qa_person_can_be_assigned_to_a_ticket():
    john = create_user(email="john@example.com")
    jane = create_user(email="jane@example.com")
    ticket = create_ticket(
        created_by=john,
        assigned_to=jane,
        problem_statement="The client is requesting changes for the existing API",
        eta=next_week,
    )
    qa_joe = create_user(email="qa.joe@example.com")

    ticket = assign_qa(ticket=ticket, qa=qa_joe)

    assert ticket.assigned_qa == qa_joe


@pytest.mark.django_db
def test_can_fetch_all_assigned_tickets_as_qa():
    john = create_user(email="john@example.com")
    jane = create_user(email="jane@example.com")
    qa_joe = create_user(email="qa.joe@example.com")
    for i in range(3):
        ticket = create_ticket(
            created_by=john,
            assigned_to=jane,
            problem_statement="The client is requesting changes for the existing API",
            eta=next_week,
        )
        assign_qa(ticket=ticket, qa=qa_joe)

    assert len(get_assigned_qa_tickets(user=qa_joe)) == 3
