from datetime import timedelta

import pytest
from django.utils import timezone

from authentication.services import create_user
from tickets.exceptions import UserNotTheAssignedQA
from tickets.models import Ticket
from tickets.selectors import (
    get_assigned_qa_tickets,
    get_assigned_tickets,
    get_created_tickets,
)
from tickets.services import create_ticket, assign_qa, mark_ticket_as

today = timezone.now()
next_week = today + timedelta(weeks=1)

PROBLEM_STATEMENT = "The client is requesting changes for the existing API"
JOHN_EMAIL = "john@example.com"
JANE_EMAIL = "jane@example.com"
QA_EMAIL = "qa@example.com"


def prepare_ticket(
    creator_email,
    assigned_to_email,
    problem_statement=PROBLEM_STATEMENT,
    eta=next_week,
):
    ticket_creator = create_user(email=creator_email)
    ticket_assignee = create_user(email=assigned_to_email)
    ticket = create_ticket(
        created_by=ticket_creator,
        assigned_to=ticket_assignee,
        problem_statement=problem_statement,
        eta=eta,
    )

    return ticket_creator, ticket_assignee, ticket


def prepare_tickets(
    n,
    creator_email,
    assigned_to_email,
    problem_statement=PROBLEM_STATEMENT,
    eta=next_week,
):
    ticket_creator = create_user(email=creator_email)
    ticket_assignee = create_user(email=assigned_to_email)
    tickets = [
        create_ticket(
            created_by=ticket_creator,
            assigned_to=ticket_assignee,
            problem_statement=problem_statement,
            eta=eta,
        )
        for _ in range(n)
    ]

    return ticket_creator, ticket_assignee, tickets


@pytest.mark.django_db
def test_user_can_create_a_ticket_and_assign_it_to_another_user():
    john = create_user(email=JOHN_EMAIL)
    jane = create_user(email=JANE_EMAIL)
    ticket = create_ticket(
        created_by=john,
        assigned_to=jane,
        problem_statement=PROBLEM_STATEMENT,
        eta=next_week,
    )
    assert ticket.assigned_to == jane


@pytest.mark.django_db
def test_can_fetch_all_assigned_tickets_of_a_user():
    john, jane, tickets = prepare_tickets(3, JOHN_EMAIL, JANE_EMAIL)
    assert len(get_assigned_tickets(user=jane)) == 3


@pytest.mark.django_db
def test_can_fetch_all_created_tickets_of_a_user():
    john, jane, tickets = prepare_tickets(3, JOHN_EMAIL, JANE_EMAIL)
    assert len(get_created_tickets(user=john)) == 3


@pytest.mark.django_db
def test_a_tickets_creation_date_is_autogenerated():
    john, jane, ticket = prepare_ticket(JOHN_EMAIL, JANE_EMAIL)
    assert ticket.created_at.day == today.day


@pytest.mark.django_db
def test_a_qa_person_can_be_assigned_to_a_ticket():
    john, jane, ticket = prepare_ticket(JOHN_EMAIL, JANE_EMAIL)
    qa = create_user(email=QA_EMAIL)

    ticket = assign_qa(ticket=ticket, qa=qa)

    assert ticket.assigned_qa == qa


@pytest.mark.django_db
def test_can_fetch_all_assigned_tickets_as_qa():
    john, jane, tickets = prepare_tickets(3, JOHN_EMAIL, JANE_EMAIL)

    qa = create_user(email=QA_EMAIL)
    for ticket in tickets:
        assign_qa(ticket=ticket, qa=qa)

    assert len(get_assigned_qa_tickets(user=qa)) == 3


@pytest.mark.django_db
def test_assigned_qa_can_pass_a_ticket():
    john, jane, ticket = prepare_ticket(JOHN_EMAIL, JANE_EMAIL)

    qa = create_user(email=QA_EMAIL)
    assign_qa(ticket=ticket, qa=qa)

    ticket = mark_ticket_as(ticket=ticket, qa=qa, status=Ticket.QAStatus.PASS)

    assert ticket.qa_status == Ticket.QAStatus.PASS


@pytest.mark.django_db
def test_assigned_qa_can_fail_a_ticket():
    john, jane, ticket = prepare_ticket(JOHN_EMAIL, JANE_EMAIL)

    qa = create_user(email=QA_EMAIL)
    assign_qa(ticket=ticket, qa=qa)

    ticket = mark_ticket_as(ticket=ticket, qa=qa, status=Ticket.QAStatus.FAIL)

    assert ticket.qa_status == Ticket.QAStatus.FAIL


@pytest.mark.django_db
def test_cannot_change_a_tickets_status_if_the_given_user_is_not_the_assigned_qa():
    john, jane, ticket = prepare_ticket(JOHN_EMAIL, JANE_EMAIL)
    qa = create_user(email=QA_EMAIL)

    with pytest.raises(UserNotTheAssignedQA):
        mark_ticket_as(ticket=ticket, qa=qa, status=Ticket.QAStatus.PASS)
